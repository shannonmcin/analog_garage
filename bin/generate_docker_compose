#!/usr/bin/env python3

import json
import os

from typing import List


beginning = """
services:
  rabbitmq:
    image: rabbitmq:3.13
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 3
"""

producer_template = """
  producer:
    image: analog_garage_prod:latest
    command: producer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
"""

sender_template = """
  sender{n}:
    image: analog_garage_prod:latest
    command: sender
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
"""

monitor_template = """
  monitor:
    image: analog_garage_prod:latest
    command: {kind}_monitor
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
"""


def read_config(file: str) -> dict:
    with open(file) as f:
        return json.load(f)


def format_section(template, config: dict, **kwargs) -> str:
    formatted_template = template.format(**kwargs)
    env_vars = "\n".join(f"      - {key.upper()}={val}" for key, val in config.items())
    return formatted_template + env_vars


def main():
    script_dir = os.path.dirname(os.path.realpath(__file__))
    docker_compose_path = f"{script_dir}/../docker-compose.yaml"
    config_path = f"{script_dir}/../config.json"

    config = read_config(config_path)

    progress_monitor_kind = config["progress_monitor"].pop("kind")
    parts = [
        beginning,
        format_section(producer_template, config["producer"]),
        format_section(
            monitor_template, config["progress_monitor"], kind=progress_monitor_kind
        ),
    ] + [
        format_section(sender_template, cfg, n=idx)
        for idx, cfg in enumerate(config["senders"])
    ]

    with open(docker_compose_path, "w") as f:
        f.write("".join(parts))


if __name__ == "__main__":
    main()
