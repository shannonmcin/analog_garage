#!/usr/bin/env python3

import json
import os

from typing import List


beginning = """version: "3.7"

services:
  rabbitmq:
    image: rabbitmq:3.13
    ports:
      - "5762:5762"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 3
"""

producer_template = """
  producer:
    image: analog_garage_prod:latest
    command: producer
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
      - NUM_MESSAGES={num_messages}
"""

sender_template = """
  sender{n}:
    image: analog_garage_prod:latest
    command: sender
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
      - MEAN_WAIT_TIME={mean_wait_time}
      - FAILURE_RATE={failure_rate}
"""

monitor_template = """
  monitor:
    image: analog_garage_prod:latest
    command: {type}_monitor
    depends_on:
      rabbitmq:
        condition: service_healthy
    environment:
      - PYTHONUNBUFFERED=true
      - REFRESH_SECS={refresh_secs}
"""


def read_config(file: str) -> dict:
    with open(file) as f:
        return json.load(f)


def format_section(template, config: dict) -> str:
    return template.format(**config)


def main():
    script_dir = os.path.dirname(os.path.realpath(__file__))
    docker_compose_path = f"{script_dir}/../docker-compose.yaml"
    config_path = f"{script_dir}/../config.json"

    config = read_config(config_path)
    parts = [
        beginning,
        format_section(producer_template, config["producer"]),
        format_section(monitor_template, config["progress_monitor"]),
    ] + [
        format_section(sender_template, {"n": idx, **cfg})
        for idx, cfg in enumerate(config["senders"])
    ]

    with open(docker_compose_path, "w") as f:
        f.write("".join(parts))


if __name__ == "__main__":
    main()
